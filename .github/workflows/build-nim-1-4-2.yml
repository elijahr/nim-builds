name: Build
on:
  pull_request:
    paths-ignore:
    - '**.md'
    - '**.jinja'
  push:
    paths-ignore:
    - '**.md'
    - '**.jinja'

jobs:
  create-release-nim-1-4-2:
    if: ${{ github.event_name == 'push' && contains(toJson(github.event.commits),
      '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]')
      == false && contains(toJson(github.event.commits), '[skip ci]') == false }}
    name: Create release 1.4.2
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}


    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.4.2--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}







  

  
  
  build-nim-1-4-2--x86_64-macos-catalina:
    name: Build nim-1.4.2--x86_64-macos-catalina.tar.xz
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--x86_64-macos-catalina

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install xz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar" || xz -d "${nim_dir}.tar.xz"
        tar xf "${nim_dir}.tar"
        rm -f "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        ln -s "${PWD}/nimcache" "${HOME}/.cache/nim"

        sh ./scripts/build-nim.sh ./build/nim-1.4.2

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir" || tar -cJf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--x86_64-macos-catalina.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-4-2--x86_64-macos-catalina--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install xz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        tar -xJf "nim-1.4.2.tar.xz"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2




  test-nim-1-4-2--x86_64-macos-catalina--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install xz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        tar -xJf "nim-1.4.2.tar.xz"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2




  build-nim-1-4-2--x86_64-macos-bigsur:
    name: Build nim-1.4.2--x86_64-macos-bigsur.tar.xz
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--x86_64-macos-bigsur

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install xz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar" || xz -d "${nim_dir}.tar.xz"
        tar xf "${nim_dir}.tar"
        rm -f "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        ln -s "${PWD}/nimcache" "${HOME}/.cache/nim"

        sh ./scripts/build-nim.sh ./build/nim-1.4.2

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir" || tar -cJf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--x86_64-macos-bigsur.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-4-2--x86_64-macos-bigsur--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-bigsur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install xz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-bigsur.tar.xz
        hub release download "$tag" -i "$tarball"
        tar -xJf "nim-1.4.2.tar.xz"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2




  test-nim-1-4-2--x86_64-macos-bigsur--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-bigsur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install xz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-bigsur.tar.xz
        hub release download "$tag" -i "$tarball"
        tar -xJf "nim-1.4.2.tar.xz"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2





  publish-release-nim-1-4-2:
    name: Publish release 1.4.2
    if: ${{ github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/')
      }}
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2






    - test-nim-1-4-2--x86_64-macos-catalina--on-macos-11-0

    - test-nim-1-4-2--x86_64-macos-catalina--on-macos-10-15







    - test-nim-1-4-2--x86_64-macos-bigsur--on-macos-11-0

    - test-nim-1-4-2--x86_64-macos-bigsur--on-macos-10-15





    steps:
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        release_id: ${{ needs.create-release-nim-1-4-2.outputs.id }}

    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive


    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Update README
      shell: bash
      run: |
        set -uexo pipefail

        pip install -r requirements.txt
        python3.9 render.py readme
        git add README.md || true
        if [ "$(git diff --name-only --cached | grep README.md)" != "" ]
        then
          git commit -m "Re-rendered README.md"
            git push || (git pull origin && git push || true)
        fi



