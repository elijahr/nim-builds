# yamllint disable rule:document-start
# yamllint disable rule:line-length
# yamllint disable rule:empty-lines
# yamllint disable rule:trailing-spaces
# yamllint disable rule:new-line-at-end-of-file
# yamllint disable rule:indentation

_anchors:
  checkout_repo: &checkout_repo
    name: Checkout repo
    uses: actions/checkout@v2
    with:
      fetch-depth: 1
      submodules: recursive

  configure_qemu: &configure_qemu
    name: Configure QEMU
    run: |
      sudo apt-get update -q -y
      sudo apt-get -qq install -y qemu qemu-user-static
      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

  install_deps_ubuntu: &install_deps_ubuntu
    name: Install deps
    run: |
      sudo add-apt-repository ppa:cpick/hub
      sudo apt-get update -q -y
      sudo apt-get -qq install -y hub pixz

  install_deps_macos: &install_deps_macos
    name: Install deps
    run: |
      brew install hub pixz

  enable_docker_experimental_features: &enable_docker_experimental_features
    name: Enable Docker experimental features
    run: |
      echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
      sudo service docker restart
      docker version -f {% raw %}'{{.Server.Experimental}}'{% endraw %}

  setup_dirs: &setup_dirs
    name: Setup dirs
    run: |
      mkdir -p build
      mkdir -p nimcache
      mkdir -p ~/.cache/

  update_readme: &update_readme
    name: Update README
    shell: bash
    run: |
      set -uexo pipefail

      pip install -r requirements.txt
      python3.9 render.py readme
      git add README.md || true
      if [ "$(git diff --name-only --cached | grep README.md)" != "" ]
      then
        git commit -m "Re-rendered README.md"
          git push || (git pull origin && git push || true)
      fi

  {% for distro in linux_distros %}
  start_distcc_host_{{ distro.name|slugify }}: &start_distcc_host_{{ distro.name|slugify }}
    name: Start distcc host
    run: |
      docker run -d \
        --platform linux/amd64 \
        -p 3600-3900:3600-3900/tcp \
        {{ distro.build_farm_host_image }}

  stop_distcc_host_{{ distro.name|slugify }}: &stop_distcc_host_{{ distro.name|slugify }}
    name: Stop distcc host
    run: |
      id=$(docker ps --filter ancestor={{ distro.build_farm_host_image }} --format "{{ '{{.ID}}' }}")
      if [ "$id" != "" ]
      then
        docker kill $id
      fi
  {% endfor %}

  {% for nim_version in nim_versions %}
  download_nim_source_{{ nim_version|slugify }}: &download_nim_source_{{ nim_version|slugify }}
    name: Download Nim source
    run: |
      cd build
      nim_dir="nim-{{ nim_version }}"
      wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
      pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
      tar xf "${nim_dir}.tar"
      rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

  create_tarball_{{ nim_version|slugify }}: &create_tarball_{{ nim_version|slugify }}
    name: Create tarball
    id: create-tarball
    run: |
      cd build
      if [ -d "/usr/local/opt/pixz/bin" ]
        export PATH="/usr/local/opt/pixz/bin:$PATH"
      fi
      nim_dir="nim-{{ nim_version }}"
      tarball="${nim_dir}.tar.xz"
      tar -Ipixz -cf "$tarball" "$nim_dir"
      echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

  generate_release_name_{{ nim_version|slugify }}: &generate_release_name_{{ nim_version|slugify }}
    name: Generate release name
    id: generate-release-name
    run: |
      release_name=nim-{{ nim_version }}--$(date '+%Y%m%d%H%M')
      echo "::set-output name=release_name::${release_name}"

  create_release_{{ nim_version|slugify }}: &create_release_{{ nim_version|slugify }}
    name: Create release
    id: create-release
    uses: actions/create-release@v1
    {% raw %}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    with:
      tag_name: ${{ steps.generate-release-name.outputs.release_name }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      draft: true
      prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
    {% endraw %}

  {% for distro in linux_distros %}
  {% for platform in distro.platforms %}
  restore_nim_cache_{{ asset_id(nim_version, distro, platform) }}: &restore_nim_cache_{{ asset_id(nim_version, distro, platform) }}
    name: Restore Nim cache
    uses: actions/cache@v2
    with:
      path: |
        nimcache
      key: "cache-{{ asset_id(nim_version, distro, platform) }}"

  build_nim_{{ asset_id(nim_version, distro, platform) }}: &build_nim_{{ asset_id(nim_version, distro, platform) }}
    name: Build Nim
    id: build-nim
    shell: bash
    run: |
      set -uexo pipefail

      {% if platform == "linux/amd64" %}
      # Build in native container
      docker run \
        --platform {{ platform }} \
        --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
        --mount "type=bind,src=${PWD}/build,dst=/build" \
        --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
        --workdir /build \
        {{ distro.build_farm_host_image }} \
        sh /scripts/build-nim.sh /build/nim-{{ nim_version }}

      {% else %}
      dump_logs () {
        docker logs $(docker ps --filter ancestor={{ distro.build_farm_host_image }} --format "{{ '{{.ID}}' }}")
      }

      # Build in emulated container
      docker run \
        --platform {{ platform }} \
        --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
        --mount "type=bind,src=${PWD}/build,dst=/build" \
        --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
        --workdir /build \
        {{ distro.build_farm_client_image }} \
        sh /scripts/build-nim.sh /build/nim-{{ nim_version }} || (status=$?; dump_logs; exit $status)
      {% endif %}

  add_tarball_to_release_{{ asset_id(nim_version, distro, platform) }}: &add_tarball_to_release_{{ asset_id(nim_version, distro, platform) }}
    name: Add tarball to release
    uses: actions/upload-release-asset@v1
    env:
      {% raw %}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      {% endraw %}
    with:
      upload_url: {{ '${{ needs.create-release-nim-' + slugify(nim_version) + '.outputs.upload_url }}' }}
      asset_path: {{ '${{ steps.create-tarball.outputs.tarball_asset_path }}' }}
      asset_name: nim-{{ asset_name(nim_version, distro, platform) }}.tar.xz
      asset_content_type: application/x-xz

  download_released_tarball_{{ asset_id(nim_version, distro, platform) }}: &download_released_tarball_{{ asset_id(nim_version, distro, platform) }}
    name: Download released tarball
    env:
      GITHUB_TOKEN: {{ '${{ secrets.GITHUB_TOKEN }}' }}
    run: |
      cd build
      tag={{ '${{ needs.create-release-nim-' + slugify(nim_version) + '.outputs.release_name }}' }}
      tarball=nim-{{ asset_name(nim_version, distro, platform) }}.tar.xz
      hub release download "$tag" -i "$tarball"
      pixz -d "$tarball" "nim-{{ nim_version }}.tar"
      tar xf "nim-{{ nim_version }}.tar"

  {% for image, platform_map in distro.test_targets.items() %}
  {% if platform in platform_map %}
  run_tests_{{ asset_id(nim_version, distro, platform) }}_{{ image|slugify }}: &run_tests_{{ asset_id(nim_version, distro, platform) }}_{{ image|slugify }}
    name: Run tests
    run: |
      # Test in emulated container
      docker run \
        --platform {{ platform_map[platform] }} \
        --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
        --mount "type=bind,src=${PWD}/build,dst=/build" \
        --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
        {{ image }} \
        sh /scripts/test-nim.sh /build/nim-{{ nim_version }}
  {% endif %}
  {% endfor %}

  {% endfor %}
  {% endfor %}

  {% for distro in macos_distros %}
  {% for arch in distro.archs %}
  restore_nim_cache_{{ asset_id(nim_version, distro, arch) }}: &restore_nim_cache_{{ asset_id(nim_version, distro, arch) }}
    name: Restore Nim cache
    uses: actions/cache@v2
    with:
      path: |
        nimcache
      key: "cache-{{ asset_id(nim_version, distro, arch) }}"

  build_nim_{{ asset_id(nim_version, distro, arch) }}: &build_nim_{{ asset_id(nim_version, distro, arch) }}
    name: Build Nim
    id: build-nim
    shell: bash
    run: |
      set -uexo pipefail
      mv nimcache ~/.cache/nim

      sh ./scripts/build-nim.sh ./build/nim-{{ nim_version }}

  add_tarball_to_release_{{ asset_id(nim_version, distro, arch) }}: &add_tarball_to_release_{{ asset_id(nim_version, distro, arch) }}
    name: Add tarball to release
    uses: actions/upload-release-asset@v1
    env:
      {% raw %}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      {% endraw %}
    with:
      upload_url: {{ '${{ needs.create-release-nim-' + slugify(nim_version) + '.outputs.upload_url }}' }}
      asset_path: {{ '${{ steps.create-tarball.outputs.tarball_asset_path }}' }}
      asset_name: nim-{{ asset_name(nim_version, distro, arch) }}.tar.xz
      asset_content_type: application/x-xz

  download_released_tarball_{{ asset_id(nim_version, distro, arch) }}: &download_released_tarball_{{ asset_id(nim_version, distro, arch) }}
    name: Download released tarball
    env:
      GITHUB_TOKEN: {{ '${{ secrets.GITHUB_TOKEN }}' }}
    run: |
      cd build
      tag={{ '${{ needs.create-release-nim-' + slugify(nim_version) + '.outputs.release_name }}' }}
      tarball=nim-{{ asset_name(nim_version, distro, arch) }}.tar.xz
      hub release download "$tag" -i "$tarball"
      pixz -d "$tarball" "nim-{{ nim_version }}.tar"
      tar xf "nim-{{ nim_version }}.tar"

  run_tests_{{ asset_id(nim_version, distro, arch) }}: &run_tests_{{ asset_id(nim_version, distro, arch) }}
    name: Run tests
    run: |
      sh ./scripts/test-nim.sh ./build/nim-{{ nim_version }}

  {% endfor %}
  {% endfor %}
  {% endfor %}

name: "Build"
on:  # yamllint disable-line rule:truthy
  pull_request:
    paths-ignore:
      - "**.md"
      - "**.jinja"
  push:
    paths-ignore:
      - "**.md"
      - "**.jinja"

jobs:
  {% for nim_version in nim_versions %}
  create-release-nim-{{ nim_version|slugify }}:
    if: {{ "${{ github.event_name == 'push' && contains(toJson(github.event.commits), '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[skip ci]') == false }}" }}
    name: Create release {{ nim_version }}
    runs-on: ubuntu-latest
    outputs:
      {% raw %}
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      {% endraw %}

    steps:
      - *checkout_repo
      - *generate_release_name_{{ nim_version|slugify }}
      - *create_release_{{ nim_version|slugify }}

  {% for distro in linux_distros %}
  {% for platform in distro.platforms %}
  build-nim-{{ asset_id(nim_version, distro, platform) }}:
    name: Build nim-{{ asset_name(nim_version, distro, platform) }}.tar.xz
    runs-on: ubuntu-latest
    needs:
      - "create-release-nim-{{ nim_version|slugify }}"
    strategy:
      fail-fast: false
    steps:
      - *checkout_repo
      {% if platform not in ("linux/amd64", "linux/386") %}
      - *configure_qemu
      {% endif %}
      - *enable_docker_experimental_features
      - *restore_nim_cache_{{ asset_id(nim_version, distro, platform) }}
      - *setup_dirs
      - *install_deps_ubuntu
      {% if platform != "linux/amd64" %}
      - *start_distcc_host_{{ distro.name|slugify }}
      {% endif %}
      - *download_nim_source_{{ nim_version|slugify }}
      - *build_nim_{{ asset_id(nim_version, distro, platform) }}
      - *create_tarball_{{ nim_version|slugify }}
      - *add_tarball_to_release_{{ asset_id(nim_version, distro, platform) }}
      {% if platform != "linux/amd64" %}
      - *stop_distcc_host_{{ distro.name|slugify }}
      {% endif %}

  {% if nim_version[0] > "0" %}
  {% for image, platform_map in distro.test_targets.items() %}
  {% if platform in platform_map %}
  test-nim-{{ asset_id(nim_version, distro, platform) }}--on-{{ image|slugify }}:
    name: Test on {{ image }}
    runs-on: ubuntu-latest
    needs:
      - create-release-nim-{{ nim_version|slugify }}
      - build-nim-{{ asset_id(nim_version, distro, platform) }}
    steps:
      - *checkout_repo
      {% if platform not in ("linux/amd64", "linux/386") %}
      - *configure_qemu
      {% endif %}
      - *enable_docker_experimental_features
      - *setup_dirs
      - *install_deps_ubuntu
      - *download_released_tarball_{{ asset_id(nim_version, distro, platform) }}
      - *run_tests_{{ asset_id(nim_version, distro, platform) }}_{{ image|slugify }}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {% endfor %}

  {% for distro in macos_distros %}
  {% for arch in distro.archs %}
  build-nim-{{ asset_id(nim_version, distro, arch) }}:
    name: Build nim-{{ asset_name(nim_version, distro, arch) }}.tar.xz
    runs-on: {{ distro.runner }}
    needs:
      - "create-release-nim-{{ nim_version|slugify }}"
    strategy:
      fail-fast: false
    steps:
      - *checkout_repo
      - *restore_nim_cache_{{ asset_id(nim_version, distro, arch) }}
      - *setup_dirs
      - *install_deps_macos
      - *download_nim_source_{{ nim_version|slugify }}
      - *build_nim_{{ asset_id(nim_version, distro, arch) }}
      - *create_tarball_{{ nim_version|slugify }}
      - *add_tarball_to_release_{{ asset_id(nim_version, distro, arch) }}

  {% if nim_version[0] > "0" %}
  {% for runner in distro.test_runners %}
  test-nim-{{ asset_id(nim_version, distro, arch) }}--on-{{ runner|slugify }}:
    name: Test on {{ runner }}
    runs-on: {{ runner }}
    needs:
      - create-release-nim-{{ nim_version|slugify }}
      - build-nim-{{ asset_id(nim_version, distro, arch) }}
    steps:
      - *checkout_repo
      - *setup_dirs
      - *install_deps_macos
      - *download_released_tarball_{{ asset_id(nim_version, distro, arch) }}
      - *run_tests_{{ asset_id(nim_version, distro, arch) }}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {% endfor %}

  publish-release-nim-{{ nim_version|slugify }}:
    name: Publish release {{ nim_version }}
    if: {{ "${{ github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/') }}" }}
    runs-on: ubuntu-latest
    needs:
      - create-release-nim-{{ nim_version|slugify }}
      {% for distro in linux_distros %}
      {% for platform in distro.platforms %}
      {% if nim_version[0] > "0" %}
      {% for image, platform_map in distro.test_targets.items() %}
      {% if platform in platform_map %}
      - test-nim-{{ asset_id(nim_version, distro, platform) }}--on-{{ image|slugify }}
      {% endif %}
      {% endfor %}
      {% else %}
      {# Can't run tests for 0.X.X #}
      - build-nim-{{ asset_id(nim_version, distro, platform) }}
      {% endif %}
      {% endfor %}
      {% endfor %}

      {% for distro in macos_distros %}
      {% for arch in distro.archs %}
      {% if nim_version[0] > "0" %}
      {% for runner in distro.test_runners %}
      - test-nim-{{ asset_id(nim_version, distro, arch) }}--on-{{ runner|slugify }}
      {% endfor %}
      {% else %}
      {# Can't run tests for 0.X.X #}
      - build-nim-{{ asset_id(nim_version, distro, arch) }}
      {% endif %}
      {% endfor %}
      {% endfor %}

    steps:
      - uses: eregon/publish-release@v1
        env:
          {% raw %}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          {% endraw %}
        with:
          release_id: {{ '${{ needs.create-release-nim-' + slugify(nim_version) + '.outputs.id }}' }}

      - *checkout_repo

      - uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - *update_readme

  {% endfor %}
