# yamllint disable rule:document-start
# yamllint disable rule:line-length
# yamllint disable rule:empty-lines
# yamllint disable rule:trailing-spaces
# yamllint disable rule:new-line-at-end-of-file
# yamllint disable rule:indentation

name: Build
on:  # yamllint disable-line rule:truthy
  pull_request:
    paths-ignore:
    - '**.md'
    - '**.jinja'
  push:
    paths-ignore:
    - '**.md'
    - '**.jinja'

jobs:
  create-release-nim-0-20-2:
    if: ${{ github.event_name == 'push' && contains(toJson(github.event.commits),
      '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]')
      == false && contains(toJson(github.event.commits), '[skip ci]') == false }}
    name: Create release 0.20.2
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}


    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-0.20.2--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}





  
  
  build-nim-0-20-2--x86_64-linux-musl:
    name: Build nim-0.20.2--x86_64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--x86_64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-0.20.2



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--x86_64-linux-musl.tar.xz
        asset_content_type: application/x-xz


  
  
  build-nim-0-20-2--armv6-linux-musleabihf:
    name: Build nim-0.20.2--armv6-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--armv6-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--armv6-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  build-nim-0-20-2--armv7-linux-musleabihf:
    name: Build nim-0.20.2--armv7-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--armv7-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--armv7-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  build-nim-0-20-2--aarch64-linux-musl:
    name: Build nim-0.20.2--aarch64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--aarch64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--aarch64-linux-musl.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  
  build-nim-0-20-2--x86_64-linux-gnu:
    name: Build nim-0.20.2--x86_64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--x86_64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-0.20.2



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--x86_64-linux-gnu.tar.xz
        asset_content_type: application/x-xz


  
  
  build-nim-0-20-2--i686-linux-gnu:
    name: Build nim-0.20.2--i686-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--i686-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/386 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--i686-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  build-nim-0-20-2--armv5-linux-gnueabi:
    name: Build nim-0.20.2--armv5-linux-gnueabi.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--armv5-linux-gnueabi

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--armv5-linux-gnueabi.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  build-nim-0-20-2--armv7-linux-gnueabihf:
    name: Build nim-0.20.2--armv7-linux-gnueabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--armv7-linux-gnueabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--armv7-linux-gnueabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  build-nim-0-20-2--aarch64-linux-gnu:
    name: Build nim-0.20.2--aarch64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--aarch64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--aarch64-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  build-nim-0-20-2--powerpc64le-linux-gnu:
    name: Build nim-0.20.2--powerpc64le-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--powerpc64le-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/ppc64le \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-0.20.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--powerpc64le-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  

  
  
  build-nim-0-20-2--x86_64-macos-catalina:
    name: Build nim-0.20.2--x86_64-macos-catalina.tar.xz
    runs-on: macos-10.15
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--x86_64-macos-catalina

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-0.20.2

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--x86_64-macos-catalina.tar.xz
        asset_content_type: application/x-xz


  
  
  
  
  build-nim-0-20-2--x86_64-macos-big-sur:
    name: Build nim-0.20.2--x86_64-macos-big-sur.tar.xz
    runs-on: macos-11.0
    needs:
    - create-release-nim-0-20-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-0-20-2--x86_64-macos-big-sur

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-0.20.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-0.20.2

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-0.20.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-0-20-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-0.20.2--x86_64-macos-big-sur.tar.xz
        asset_content_type: application/x-xz


  
  
  

  publish-release-nim-0-20-2:
    name: Publish release 0.20.2
    if: ${{ github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/')
      }}
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-0-20-2




    - build-nim-0-20-2--x86_64-linux-musl




    - build-nim-0-20-2--armv6-linux-musleabihf




    - build-nim-0-20-2--armv7-linux-musleabihf




    - build-nim-0-20-2--aarch64-linux-musl






    - build-nim-0-20-2--x86_64-linux-gnu




    - build-nim-0-20-2--i686-linux-gnu




    - build-nim-0-20-2--armv5-linux-gnueabi




    - build-nim-0-20-2--armv7-linux-gnueabihf




    - build-nim-0-20-2--aarch64-linux-gnu




    - build-nim-0-20-2--powerpc64le-linux-gnu








    - build-nim-0-20-2--x86_64-macos-catalina






    - build-nim-0-20-2--x86_64-macos-big-sur




    steps:
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        release_id: ${{ needs.create-release-nim-0-20-2.outputs.id }}

    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive


    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Update README
      shell: bash
      run: |
        set -uexo pipefail

        pip install -r requirements.txt
        python3.9 render.py readme
        git add README.md || true
        if [ "$(git diff --name-only --cached | grep README.md)" != "" ]
        then
          git commit -m "Re-rendered README.md"
            git push || (git pull origin && git push || true)
        fi



  
  create-release-nim-1-0-10:
    if: ${{ github.event_name == 'push' && contains(toJson(github.event.commits),
      '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]')
      == false && contains(toJson(github.event.commits), '[skip ci]') == false }}
    name: Create release 1.0.10
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}


    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.0.10--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}





  
  
  build-nim-1-0-10--x86_64-linux-musl:
    name: Build nim-1.0.10--x86_64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--x86_64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.0.10



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--x86_64-linux-musl.tar.xz
        asset_content_type: application/x-xz


  
  
  
  test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-11:
    name: Test on alpine:3.11
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.11 \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-10:
    name: Test on alpine:3.10
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.10 \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-9:
    name: Test on alpine:3.9
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.9 \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-8:
    name: Test on alpine:3.8
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.8 \
          sh /scripts/test-nim.sh /build/nim-1.0.10




  build-nim-1-0-10--armv6-linux-musleabihf:
    name: Build nim-1.0.10--armv6-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--armv6-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--armv6-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-0-10--armv6-linux-musleabihf--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--armv6-linux-musleabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--armv6-linux-musleabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.0.10












  build-nim-1-0-10--armv7-linux-musleabihf:
    name: Build nim-1.0.10--armv7-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--armv7-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--armv7-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-0-10--armv7-linux-musleabihf--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--armv7-linux-musleabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--armv7-linux-musleabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.0.10












  build-nim-1-0-10--aarch64-linux-musl:
    name: Build nim-1.0.10--aarch64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--aarch64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--aarch64-linux-musl.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-0-10--aarch64-linux-musl--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--aarch64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--aarch64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.0.10














  build-nim-1-0-10--x86_64-linux-gnu:
    name: Build nim-1.0.10--x86_64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--x86_64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.0.10



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--x86_64-linux-gnu.tar.xz
        asset_content_type: application/x-xz


  
  
  
  test-nim-1-0-10--x86_64-linux-gnu--on-debian-buster:
    name: Test on debian:buster
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          debian:buster \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-gnu--on-archlinux:
    name: Test on archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          archlinux \
          sh /scripts/test-nim.sh /build/nim-1.0.10







  test-nim-1-0-10--x86_64-linux-gnu--on-ubuntu-bionic:
    name: Test on ubuntu:bionic
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          ubuntu:bionic \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-gnu--on-ubuntu-focal:
    name: Test on ubuntu:focal
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          ubuntu:focal \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-gnu--on-fedora-31:
    name: Test on fedora:31
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:31 \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-gnu--on-fedora-32:
    name: Test on fedora:32
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:32 \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--x86_64-linux-gnu--on-fedora-33:
    name: Test on fedora:33
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:33 \
          sh /scripts/test-nim.sh /build/nim-1.0.10




  build-nim-1-0-10--i686-linux-gnu:
    name: Build nim-1.0.10--i686-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--i686-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/386 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--i686-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  build-nim-1-0-10--armv5-linux-gnueabi:
    name: Build nim-1.0.10--armv5-linux-gnueabi.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--armv5-linux-gnueabi

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--armv5-linux-gnueabi.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-0-10--armv5-linux-gnueabi--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--armv5-linux-gnueabi
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--armv5-linux-gnueabi.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.0.10
















  build-nim-1-0-10--armv7-linux-gnueabihf:
    name: Build nim-1.0.10--armv7-linux-gnueabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--armv7-linux-gnueabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--armv7-linux-gnueabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-0-10--armv7-linux-gnueabihf--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--armv7-linux-gnueabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--armv7-linux-gnueabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.0.10
















  build-nim-1-0-10--aarch64-linux-gnu:
    name: Build nim-1.0.10--aarch64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--aarch64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--aarch64-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-0-10--aarch64-linux-gnu--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--aarch64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--aarch64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.0.10



  test-nim-1-0-10--aarch64-linux-gnu--on-abyo-manjaro_aarch64:
    name: Test on abyo/manjaro_aarch64
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--aarch64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--aarch64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          abyo/manjaro_aarch64 \
          sh /scripts/test-nim.sh /build/nim-1.0.10














  build-nim-1-0-10--powerpc64le-linux-gnu:
    name: Build nim-1.0.10--powerpc64le-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--powerpc64le-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/ppc64le \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.0.10 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--powerpc64le-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  build-nim-1-0-10--x86_64-macos-catalina:
    name: Build nim-1.0.10--x86_64-macos-catalina.tar.xz
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--x86_64-macos-catalina

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-1.0.10

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--x86_64-macos-catalina.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-0-10--x86_64-macos-catalina--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.0.10




  test-nim-1-0-10--x86_64-macos-catalina--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.0.10




  build-nim-1-0-10--x86_64-macos-big-sur:
    name: Build nim-1.0.10--x86_64-macos-big-sur.tar.xz
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-0-10
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-0-10--x86_64-macos-big-sur

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-1.0.10

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.0.10"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-0-10.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.0.10--x86_64-macos-big-sur.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-0-10--x86_64-macos-big-sur--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-macos-big-sur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-macos-big-sur.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.0.10




  test-nim-1-0-10--x86_64-macos-big-sur--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-0-10
    - build-nim-1-0-10--x86_64-macos-big-sur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-0-10.outputs.release_name }}
        tarball=nim-1.0.10--x86_64-macos-big-sur.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.0.10.tar"
        tar xf "nim-1.0.10.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.0.10





  publish-release-nim-1-0-10:
    name: Publish release 1.0.10
    if: ${{ github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/')
      }}
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-0-10





    - test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-12



    - test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-11



    - test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-10



    - test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-9



    - test-nim-1-0-10--x86_64-linux-musl--on-alpine-3-8







    - test-nim-1-0-10--armv6-linux-musleabihf--on-alpine-3-12















    - test-nim-1-0-10--armv7-linux-musleabihf--on-alpine-3-12















    - test-nim-1-0-10--aarch64-linux-musl--on-alpine-3-12

















    - test-nim-1-0-10--x86_64-linux-gnu--on-debian-buster



    - test-nim-1-0-10--x86_64-linux-gnu--on-archlinux







    - test-nim-1-0-10--x86_64-linux-gnu--on-ubuntu-bionic



    - test-nim-1-0-10--x86_64-linux-gnu--on-ubuntu-focal



    - test-nim-1-0-10--x86_64-linux-gnu--on-fedora-31



    - test-nim-1-0-10--x86_64-linux-gnu--on-fedora-32



    - test-nim-1-0-10--x86_64-linux-gnu--on-fedora-33

































    - test-nim-1-0-10--armv5-linux-gnueabi--on-lopsided-archlinux























    - test-nim-1-0-10--armv7-linux-gnueabihf--on-lopsided-archlinux























    - test-nim-1-0-10--aarch64-linux-gnu--on-lopsided-archlinux



    - test-nim-1-0-10--aarch64-linux-gnu--on-abyo-manjaro_aarch64










































    - test-nim-1-0-10--x86_64-macos-catalina--on-macos-11-0

    - test-nim-1-0-10--x86_64-macos-catalina--on-macos-10-15







    - test-nim-1-0-10--x86_64-macos-big-sur--on-macos-11-0

    - test-nim-1-0-10--x86_64-macos-big-sur--on-macos-10-15





    steps:
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        release_id: ${{ needs.create-release-nim-1-0-10.outputs.id }}

    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive


    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Update README
      shell: bash
      run: |
        set -uexo pipefail

        pip install -r requirements.txt
        python3.9 render.py readme
        git add README.md || true
        if [ "$(git diff --name-only --cached | grep README.md)" != "" ]
        then
          git commit -m "Re-rendered README.md"
            git push || (git pull origin && git push || true)
        fi



  
  create-release-nim-1-2-8:
    if: ${{ github.event_name == 'push' && contains(toJson(github.event.commits),
      '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]')
      == false && contains(toJson(github.event.commits), '[skip ci]') == false }}
    name: Create release 1.2.8
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}


    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.2.8--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}





  
  
  build-nim-1-2-8--x86_64-linux-musl:
    name: Build nim-1.2.8--x86_64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--x86_64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.2.8



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--x86_64-linux-musl.tar.xz
        asset_content_type: application/x-xz


  
  
  
  test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-11:
    name: Test on alpine:3.11
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.11 \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-10:
    name: Test on alpine:3.10
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.10 \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-9:
    name: Test on alpine:3.9
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.9 \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-8:
    name: Test on alpine:3.8
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.8 \
          sh /scripts/test-nim.sh /build/nim-1.2.8




  build-nim-1-2-8--armv6-linux-musleabihf:
    name: Build nim-1.2.8--armv6-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--armv6-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--armv6-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-2-8--armv6-linux-musleabihf--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--armv6-linux-musleabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--armv6-linux-musleabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.2.8












  build-nim-1-2-8--armv7-linux-musleabihf:
    name: Build nim-1.2.8--armv7-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--armv7-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--armv7-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-2-8--armv7-linux-musleabihf--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--armv7-linux-musleabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--armv7-linux-musleabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.2.8












  build-nim-1-2-8--aarch64-linux-musl:
    name: Build nim-1.2.8--aarch64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--aarch64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--aarch64-linux-musl.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-2-8--aarch64-linux-musl--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--aarch64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--aarch64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.2.8














  build-nim-1-2-8--x86_64-linux-gnu:
    name: Build nim-1.2.8--x86_64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--x86_64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.2.8



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--x86_64-linux-gnu.tar.xz
        asset_content_type: application/x-xz


  
  
  
  test-nim-1-2-8--x86_64-linux-gnu--on-debian-buster:
    name: Test on debian:buster
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          debian:buster \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-gnu--on-archlinux:
    name: Test on archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          archlinux \
          sh /scripts/test-nim.sh /build/nim-1.2.8







  test-nim-1-2-8--x86_64-linux-gnu--on-ubuntu-bionic:
    name: Test on ubuntu:bionic
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          ubuntu:bionic \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-gnu--on-ubuntu-focal:
    name: Test on ubuntu:focal
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          ubuntu:focal \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-gnu--on-fedora-31:
    name: Test on fedora:31
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:31 \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-gnu--on-fedora-32:
    name: Test on fedora:32
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:32 \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--x86_64-linux-gnu--on-fedora-33:
    name: Test on fedora:33
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:33 \
          sh /scripts/test-nim.sh /build/nim-1.2.8




  build-nim-1-2-8--i686-linux-gnu:
    name: Build nim-1.2.8--i686-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--i686-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/386 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--i686-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  build-nim-1-2-8--armv5-linux-gnueabi:
    name: Build nim-1.2.8--armv5-linux-gnueabi.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--armv5-linux-gnueabi

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--armv5-linux-gnueabi.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-2-8--armv5-linux-gnueabi--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--armv5-linux-gnueabi
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--armv5-linux-gnueabi.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.2.8
















  build-nim-1-2-8--armv7-linux-gnueabihf:
    name: Build nim-1.2.8--armv7-linux-gnueabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--armv7-linux-gnueabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--armv7-linux-gnueabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-2-8--armv7-linux-gnueabihf--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--armv7-linux-gnueabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--armv7-linux-gnueabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.2.8
















  build-nim-1-2-8--aarch64-linux-gnu:
    name: Build nim-1.2.8--aarch64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--aarch64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--aarch64-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-2-8--aarch64-linux-gnu--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--aarch64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--aarch64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.2.8



  test-nim-1-2-8--aarch64-linux-gnu--on-abyo-manjaro_aarch64:
    name: Test on abyo/manjaro_aarch64
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--aarch64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--aarch64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          abyo/manjaro_aarch64 \
          sh /scripts/test-nim.sh /build/nim-1.2.8














  build-nim-1-2-8--powerpc64le-linux-gnu:
    name: Build nim-1.2.8--powerpc64le-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--powerpc64le-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/ppc64le \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.2.8 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--powerpc64le-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  build-nim-1-2-8--x86_64-macos-catalina:
    name: Build nim-1.2.8--x86_64-macos-catalina.tar.xz
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--x86_64-macos-catalina

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-1.2.8

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--x86_64-macos-catalina.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-2-8--x86_64-macos-catalina--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.2.8




  test-nim-1-2-8--x86_64-macos-catalina--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.2.8




  build-nim-1-2-8--x86_64-macos-big-sur:
    name: Build nim-1.2.8--x86_64-macos-big-sur.tar.xz
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-2-8
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-2-8--x86_64-macos-big-sur

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-1.2.8

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.2.8"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-2-8.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.2.8--x86_64-macos-big-sur.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-2-8--x86_64-macos-big-sur--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-macos-big-sur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-macos-big-sur.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.2.8




  test-nim-1-2-8--x86_64-macos-big-sur--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-2-8
    - build-nim-1-2-8--x86_64-macos-big-sur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-2-8.outputs.release_name }}
        tarball=nim-1.2.8--x86_64-macos-big-sur.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.2.8.tar"
        tar xf "nim-1.2.8.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.2.8





  publish-release-nim-1-2-8:
    name: Publish release 1.2.8
    if: ${{ github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/')
      }}
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-2-8





    - test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-12



    - test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-11



    - test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-10



    - test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-9



    - test-nim-1-2-8--x86_64-linux-musl--on-alpine-3-8







    - test-nim-1-2-8--armv6-linux-musleabihf--on-alpine-3-12















    - test-nim-1-2-8--armv7-linux-musleabihf--on-alpine-3-12















    - test-nim-1-2-8--aarch64-linux-musl--on-alpine-3-12

















    - test-nim-1-2-8--x86_64-linux-gnu--on-debian-buster



    - test-nim-1-2-8--x86_64-linux-gnu--on-archlinux







    - test-nim-1-2-8--x86_64-linux-gnu--on-ubuntu-bionic



    - test-nim-1-2-8--x86_64-linux-gnu--on-ubuntu-focal



    - test-nim-1-2-8--x86_64-linux-gnu--on-fedora-31



    - test-nim-1-2-8--x86_64-linux-gnu--on-fedora-32



    - test-nim-1-2-8--x86_64-linux-gnu--on-fedora-33

































    - test-nim-1-2-8--armv5-linux-gnueabi--on-lopsided-archlinux























    - test-nim-1-2-8--armv7-linux-gnueabihf--on-lopsided-archlinux























    - test-nim-1-2-8--aarch64-linux-gnu--on-lopsided-archlinux



    - test-nim-1-2-8--aarch64-linux-gnu--on-abyo-manjaro_aarch64










































    - test-nim-1-2-8--x86_64-macos-catalina--on-macos-11-0

    - test-nim-1-2-8--x86_64-macos-catalina--on-macos-10-15







    - test-nim-1-2-8--x86_64-macos-big-sur--on-macos-11-0

    - test-nim-1-2-8--x86_64-macos-big-sur--on-macos-10-15





    steps:
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        release_id: ${{ needs.create-release-nim-1-2-8.outputs.id }}

    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive


    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Update README
      shell: bash
      run: |
        set -uexo pipefail

        pip install -r requirements.txt
        python3.9 render.py readme
        git add README.md || true
        if [ "$(git diff --name-only --cached | grep README.md)" != "" ]
        then
          git commit -m "Re-rendered README.md"
            git push || (git pull origin && git push || true)
        fi



  
  create-release-nim-1-4-2:
    if: ${{ github.event_name == 'push' && contains(toJson(github.event.commits),
      '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]')
      == false && contains(toJson(github.event.commits), '[skip ci]') == false }}
    name: Create release 1.4.2
    runs-on: ubuntu-latest
    outputs:
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}


    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.4.2--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}





  
  
  build-nim-1-4-2--x86_64-linux-musl:
    name: Build nim-1.4.2--x86_64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--x86_64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.4.2



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--x86_64-linux-musl.tar.xz
        asset_content_type: application/x-xz


  
  
  
  test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-11:
    name: Test on alpine:3.11
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.11 \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-10:
    name: Test on alpine:3.10
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.10 \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-9:
    name: Test on alpine:3.9
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.9 \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-8:
    name: Test on alpine:3.8
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.8 \
          sh /scripts/test-nim.sh /build/nim-1.4.2




  build-nim-1-4-2--armv6-linux-musleabihf:
    name: Build nim-1.4.2--armv6-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--armv6-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--armv6-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-4-2--armv6-linux-musleabihf--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--armv6-linux-musleabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--armv6-linux-musleabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v6 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.4.2












  build-nim-1-4-2--armv7-linux-musleabihf:
    name: Build nim-1.4.2--armv7-linux-musleabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--armv7-linux-musleabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--armv7-linux-musleabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-4-2--armv7-linux-musleabihf--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--armv7-linux-musleabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--armv7-linux-musleabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.4.2












  build-nim-1-4-2--aarch64-linux-musl:
    name: Build nim-1.4.2--aarch64-linux-musl.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--aarch64-linux-musl

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--aarch64-linux-musl.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi


  
  
  
  test-nim-1-4-2--aarch64-linux-musl--on-alpine-3-12:
    name: Test on alpine:3.12
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--aarch64-linux-musl
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--aarch64-linux-musl.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          alpine:3.12 \
          sh /scripts/test-nim.sh /build/nim-1.4.2














  build-nim-1-4-2--x86_64-linux-gnu:
    name: Build nim-1.4.2--x86_64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--x86_64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        # Build in native container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.4.2



    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--x86_64-linux-gnu.tar.xz
        asset_content_type: application/x-xz


  
  
  
  test-nim-1-4-2--x86_64-linux-gnu--on-debian-buster:
    name: Test on debian:buster
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          debian:buster \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-gnu--on-archlinux:
    name: Test on archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          archlinux \
          sh /scripts/test-nim.sh /build/nim-1.4.2







  test-nim-1-4-2--x86_64-linux-gnu--on-ubuntu-bionic:
    name: Test on ubuntu:bionic
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          ubuntu:bionic \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-gnu--on-ubuntu-focal:
    name: Test on ubuntu:focal
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          ubuntu:focal \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-gnu--on-fedora-31:
    name: Test on fedora:31
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:31 \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-gnu--on-fedora-32:
    name: Test on fedora:32
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:32 \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--x86_64-linux-gnu--on-fedora-33:
    name: Test on fedora:33
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"



    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/amd64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          fedora:33 \
          sh /scripts/test-nim.sh /build/nim-1.4.2




  build-nim-1-4-2--i686-linux-gnu:
    name: Build nim-1.4.2--i686-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--i686-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/386 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--i686-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  build-nim-1-4-2--armv5-linux-gnueabi:
    name: Build nim-1.4.2--armv5-linux-gnueabi.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--armv5-linux-gnueabi

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--armv5-linux-gnueabi.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-4-2--armv5-linux-gnueabi--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--armv5-linux-gnueabi
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--armv5-linux-gnueabi.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v5 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.4.2
















  build-nim-1-4-2--armv7-linux-gnueabihf:
    name: Build nim-1.4.2--armv7-linux-gnueabihf.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--armv7-linux-gnueabihf

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--armv7-linux-gnueabihf.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-4-2--armv7-linux-gnueabihf--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--armv7-linux-gnueabihf
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--armv7-linux-gnueabihf.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm/v7 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.4.2
















  build-nim-1-4-2--aarch64-linux-gnu:
    name: Build nim-1.4.2--aarch64-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--aarch64-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--aarch64-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  test-nim-1-4-2--aarch64-linux-gnu--on-lopsided-archlinux:
    name: Test on lopsided/archlinux
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--aarch64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--aarch64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64/v8 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          lopsided/archlinux \
          sh /scripts/test-nim.sh /build/nim-1.4.2



  test-nim-1-4-2--aarch64-linux-gnu--on-abyo-manjaro_aarch64:
    name: Test on abyo/manjaro_aarch64
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--aarch64-linux-gnu
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--aarch64-linux-gnu.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"







    - name: Run tests
      run: |
        # Test in emulated container
        docker run \
          --platform linux/arm64 \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          abyo/manjaro_aarch64 \
          sh /scripts/test-nim.sh /build/nim-1.4.2














  build-nim-1-4-2--powerpc64le-linux-gnu:
    name: Build nim-1.4.2--powerpc64le-linux-gnu.tar.xz
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--powerpc64le-linux-gnu

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        sudo add-apt-repository ppa:cpick/hub
        sudo apt-get update -q -y
        sudo apt-get -qq install -y hub pixz

    - name: Start distcc host
      run: |
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail


        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        # Build in emulated container
        docker run \
          --platform linux/ppc64le \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/build,dst=/build" \
          --mount "type=bind,src=${PWD}/scripts,dst=/scripts" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh /scripts/build-nim.sh /build/nim-1.4.2 || (status=$?; dump_logs; exit $status)


    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--powerpc64le-linux-gnu.tar.xz
        asset_content_type: application/x-xz

    - name: Stop distcc host
      run: |
        id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        if [ "$id" != "" ]
        then
          docker kill $id
        fi




  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  build-nim-1-4-2--x86_64-macos-catalina:
    name: Build nim-1.4.2--x86_64-macos-catalina.tar.xz
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--x86_64-macos-catalina

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-1.4.2

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--x86_64-macos-catalina.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-4-2--x86_64-macos-catalina--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2




  test-nim-1-4-2--x86_64-macos-catalina--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-catalina
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-catalina.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2




  build-nim-1-4-2--x86_64-macos-big-sur:
    name: Build nim-1.4.2--x86_64-macos-big-sur.tar.xz
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-4-2
    strategy:
      fail-fast: false
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: cache-1-4-2--x86_64-macos-big-sur

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download Nim source
      run: |
        cd build
        nim_dir="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim_dir}.tar.xz"
        pixz -d "${nim_dir}.tar.xz" "${nim_dir}.tar"
        tar xf "${nim_dir}.tar"
        rm "${nim_dir}.tar.xz" "${nim_dir}.tar"

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail
        mv nimcache ~/.cache/nim

        sh ./scripts/build-nim.sh ./build/nim-1.4.2

    - name: Create tarball
      id: create-tarball
      run: |
        cd build
        nim_dir="nim-1.4.2"
        tarball="${nim_dir}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim_dir"
        echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        upload_url: ${{ needs.create-release-nim-1-4-2.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
        asset_name: nim-1.4.2--x86_64-macos-big-sur.tar.xz
        asset_content_type: application/x-xz


  
  
  test-nim-1-4-2--x86_64-macos-big-sur--on-macos-11-0:
    name: Test on macos-11.0
    runs-on: macos-11.0
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-big-sur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-big-sur.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2





  test-nim-1-4-2--x86_64-macos-big-sur--on-macos-10-15:
    name: Test on macos-10.15
    runs-on: macos-10.15
    needs:
    - create-release-nim-1-4-2
    - build-nim-1-4-2--x86_64-macos-big-sur
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Setup dirs
      run: |
        mkdir -p build
        mkdir -p nimcache
        mkdir -p ~/.cache/

    - name: Install deps
      run: |
        brew install hub pixz

    - name: Download released tarball
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd build
        tag=${{ needs.create-release-nim-1-4-2.outputs.release_name }}
        tarball=nim-1.4.2--x86_64-macos-big-sur.tar.xz
        hub release download "$tag" -i "$tarball"
        pixz -d "$tarball" "nim-1.4.2.tar"
        tar xf "nim-1.4.2.tar"

    - name: Run tests
      run: |
        sh ./scripts/test-nim.sh ./build/nim-1.4.2






  publish-release-nim-1-4-2:
    name: Publish release 1.4.2
    if: ${{ github.ref == 'refs/heads/devel' || startsWith(github.ref, 'refs/tags/')
      }}
    runs-on: ubuntu-latest
    needs:
    - create-release-nim-1-4-2





    - test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-12



    - test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-11



    - test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-10



    - test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-9



    - test-nim-1-4-2--x86_64-linux-musl--on-alpine-3-8







    - test-nim-1-4-2--armv6-linux-musleabihf--on-alpine-3-12















    - test-nim-1-4-2--armv7-linux-musleabihf--on-alpine-3-12















    - test-nim-1-4-2--aarch64-linux-musl--on-alpine-3-12

















    - test-nim-1-4-2--x86_64-linux-gnu--on-debian-buster



    - test-nim-1-4-2--x86_64-linux-gnu--on-archlinux







    - test-nim-1-4-2--x86_64-linux-gnu--on-ubuntu-bionic



    - test-nim-1-4-2--x86_64-linux-gnu--on-ubuntu-focal



    - test-nim-1-4-2--x86_64-linux-gnu--on-fedora-31



    - test-nim-1-4-2--x86_64-linux-gnu--on-fedora-32



    - test-nim-1-4-2--x86_64-linux-gnu--on-fedora-33

































    - test-nim-1-4-2--armv5-linux-gnueabi--on-lopsided-archlinux























    - test-nim-1-4-2--armv7-linux-gnueabihf--on-lopsided-archlinux























    - test-nim-1-4-2--aarch64-linux-gnu--on-lopsided-archlinux



    - test-nim-1-4-2--aarch64-linux-gnu--on-abyo-manjaro_aarch64










































    - test-nim-1-4-2--x86_64-macos-catalina--on-macos-11-0

    - test-nim-1-4-2--x86_64-macos-catalina--on-macos-10-15







    - test-nim-1-4-2--x86_64-macos-big-sur--on-macos-11-0

    - test-nim-1-4-2--x86_64-macos-big-sur--on-macos-10-15





    steps:
    - uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      with:
        release_id: ${{ needs.create-release-nim-1-4-2.outputs.id }}

    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive


    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Update README
      shell: bash
      run: |
        set -uexo pipefail

        pip install -r requirements.txt
        python3.9 render.py readme
        git add README.md || true
        if [ "$(git diff --name-only --cached | grep README.md)" != "" ]
        then
          git commit -m "Re-rendered README.md"
            git push || (git pull origin && git push || true)
        fi



