name: Build
on:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    paths-ignore:
      - "**.md"

jobs:
  
  nim-1-0-10-create-release:
    name: Create release

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.0.10--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
      

  
  nim-1-0-10-alpine-3-12-build:
    name: Build Nim 1.0.10 alpine-3-12
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/386
          
          - linux/arm/v6
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.0.10-alpine-3-12-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.0.10"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  
  nim-1-0-10-archlinux-build:
    name: Build Nim 1.0.10 archlinux
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/arm/v5
          
          - linux/arm/v6
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.0.10-archlinux-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:archlinux

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:archlinux \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.0.10"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  
  nim-1-0-10-debian-buster-build:
    name: Build Nim 1.0.10 debian-buster
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/386
          
          - linux/arm/v5
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
          - linux/ppc64le
          
          - linux/s390x
          
          - linux/mips64le
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.0.10-debian-buster-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.0.10"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.0.10"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  

  nim-1-0-10-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-1-0-10-create-release
      
      - nim-1-0-10-alpine-3-12-build
      
      - nim-1-0-10-archlinux-build
      
      - nim-1-0-10-debian-buster-build
      

    steps:
    - uses: eregon/publish-release@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        release_id: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}

  
  nim-1-2-8-create-release:
    name: Create release

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.2.8--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
      

  
  nim-1-2-8-alpine-3-12-build:
    name: Build Nim 1.2.8 alpine-3-12
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/386
          
          - linux/arm/v6
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.2.8-alpine-3-12-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.2.8"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  
  nim-1-2-8-archlinux-build:
    name: Build Nim 1.2.8 archlinux
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/arm/v5
          
          - linux/arm/v6
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.2.8-archlinux-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:archlinux

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:archlinux \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.2.8"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  
  nim-1-2-8-debian-buster-build:
    name: Build Nim 1.2.8 debian-buster
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/386
          
          - linux/arm/v5
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
          - linux/ppc64le
          
          - linux/s390x
          
          - linux/mips64le
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.2.8-debian-buster-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.2.8"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.2.8"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  

  nim-1-2-8-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-1-2-8-create-release
      
      - nim-1-2-8-alpine-3-12-build
      
      - nim-1-2-8-archlinux-build
      
      - nim-1-2-8-debian-buster-build
      

    steps:
    - uses: eregon/publish-release@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        release_id: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}

  
  nim-1-4-2-create-release:
    name: Create release

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Generate release name
      id: generate-release-name
      run: |
        release_name=nim-1.4.2--$(date '+%Y%m%d%H%M')
        echo "::set-output name=release_name::${release_name}"

    - name: Create release
      id: create-release
      uses: actions/create-release@v1
      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.generate-release-name.outputs.release_name }}
        release_name: ${{ steps.generate-release-name.outputs.release_name }}
        draft: true
        prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
      

  
  nim-1-4-2-alpine-3-12-build:
    name: Build Nim 1.4.2 alpine-3-12
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/386
          
          - linux/arm/v6
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.4.2-alpine-3-12-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:alpine-3.12

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:alpine-3.12 \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.4.2"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  
  nim-1-4-2-archlinux-build:
    name: Build Nim 1.4.2 archlinux
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/arm/v5
          
          - linux/arm/v6
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.4.2-archlinux-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:archlinux

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:archlinux \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.4.2"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  
  nim-1-4-2-debian-buster-build:
    name: Build Nim 1.4.2 debian-buster
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
      matrix:
        platform:
          
          - linux/amd64
          
          - linux/386
          
          - linux/arm/v5
          
          - linux/arm/v7
          
          - linux/arm64/v8
          
          - linux/ppc64le
          
          - linux/s390x
          
          - linux/mips64le
          
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      if: ${{ matrix.platform != 'linux/amd64' && matrix.platform != 'linux/386' }}
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Enable Docker experimental features
      run: |
        echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
        sudo service docker restart
        docker version -f '{{.Server.Experimental}}'

    - name: Restore Nim cache
      uses: actions/cache@v2
      with:
        path: |
          nimcache
        key: "nim-1.4.2-debian-buster-${{ matrix.platform }}-nimcache"

    - name: Install pixz
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y pixz

    - name: Build Nim
      id: build-nim
      shell: bash
      run: |
        set -uexo pipefail

        # Start distcc host
        docker run -d \
          --platform linux/amd64 \
          -p 3600-3900:3600-3900/tcp \
          elijahru/build-farm:debian-buster-slim

        dump_logs () {
          docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
        }

        mkdir -p nimcache

        cd build
        nim="nim-1.4.2"
        wget "https://nim-lang.org/download/${nim}.tar.xz"
        pixz -d "${nim}.tar.xz" "${nim}.tar"
        tar xf "${nim}.tar"
        rm "${nim}.tar.xz" "${nim}.tar"

        # Build in emulated container
        docker run \
          --platform ${{ matrix.platform }} \
          --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
          --mount "type=bind,src=${PWD}/,dst=/build" \
          --workdir /build \
          elijahru/build-farm-client:debian-buster-slim \
          sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)

    - name: Create tarball
      id: create-tarball
      run: |
        nim="nim-1.4.2"
        tarball="${nim}.tar.xz"
        tar -Ipixz -cf "$tarball" "$nim"
        echo "::set-output name=asset_path::${PWD}/build/${tarball}"

    - name: Add tarball to release
      uses: actions/upload-release-asset@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
        asset_path: ${{ steps.create-tarball.outputs.asset_path }}
        asset_name: ${{ steps.build-nim.outputs.asset_name }}
        asset_content_type: application/x-xz

  

  nim-1-4-2-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-1-4-2-create-release
      
      - nim-1-4-2-alpine-3-12-build
      
      - nim-1-4-2-archlinux-build
      
      - nim-1-4-2-debian-buster-build
      

    steps:
    - uses: eregon/publish-release@v1
      env:
        
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      with:
        release_id: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}

  