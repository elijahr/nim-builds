---
# yamllint disable rule:line-length
# yamllint disable rule:empty-lines
# yamllint disable rule:trailing-spaces
# yamllint disable rule:new-line-at-end-of-file

name: "Build"
on:  # yamllint disable-line rule:truthy
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    paths-ignore:
      - "**.md"

jobs:
  
  nim-0-20-2-create-release:
    name: Create release 0.20.2

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Generate release name
        id: generate-release-name
        run: |
          release_name=nim-0.20.2--$(date '+%Y%m%d%H%M')
          echo "::set-output name=release_name::${release_name}"

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate-release-name.outputs.release_name }}
          release_name: ${{ steps.generate-release-name.outputs.release_name }}
          draft: true
          prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        

  
  
  build-nim-0-20-2--alpine-3-12--linux-amd64:
    name: 0.20.2, alpine-3-12, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-alpine-3-12-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:alpine-3.12 \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--alpine-3-12--amd64.tar.xz
          asset_content_type: application/x-xz

      

      

  
  build-nim-0-20-2--alpine-3-12--linux-arm-v6:
    name: 0.20.2, alpine-3-12, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-alpine-3-12-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--alpine-3-12--arm32v6.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--alpine-3-12--linux-arm-v7:
    name: 0.20.2, alpine-3-12, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-alpine-3-12-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--alpine-3-12--arm32v7.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--alpine-3-12--linux-arm64-v8:
    name: 0.20.2, alpine-3-12, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-alpine-3-12-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--alpine-3-12--arm64v8.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-0-20-2--archlinux--linux-amd64:
    name: 0.20.2, archlinux, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-archlinux-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:archlinux \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--archlinux--amd64.tar.xz
          asset_content_type: application/x-xz

      

      

  
  build-nim-0-20-2--archlinux--linux-arm-v5:
    name: 0.20.2, archlinux, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-archlinux-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--archlinux--arm32v5.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--archlinux--linux-arm-v6:
    name: 0.20.2, archlinux, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-archlinux-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--archlinux--arm32v6.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--archlinux--linux-arm-v7:
    name: 0.20.2, archlinux, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-archlinux-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--archlinux--arm32v7.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--archlinux--linux-arm64-v8:
    name: 0.20.2, archlinux, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-archlinux-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--archlinux--arm64v8.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-0-20-2--debian-buster--linux-amd64:
    name: 0.20.2, debian-buster, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-debian-buster-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:debian-buster-slim \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--debian-buster--amd64.tar.xz
          asset_content_type: application/x-xz

      

      

  
  build-nim-0-20-2--debian-buster--linux-386:
    name: 0.20.2, debian-buster, linux/386
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-debian-buster-linux/386-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--debian-buster--386.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--debian-buster--linux-arm-v5:
    name: 0.20.2, debian-buster, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-debian-buster-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--debian-buster--arm32v5.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--debian-buster--linux-arm-v7:
    name: 0.20.2, debian-buster, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-debian-buster-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--debian-buster--arm32v7.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--debian-buster--linux-arm64-v8:
    name: 0.20.2, debian-buster, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-debian-buster-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--debian-buster--arm64v8.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-0-20-2--debian-buster--linux-ppc64le:
    name: 0.20.2, debian-buster, linux/ppc64le
    runs-on: ubuntu-latest
    needs:
      - "nim-0-20-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-0.20.2-debian-buster-linux/ppc64le-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-0.20.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-0.20.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-0-20-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-0.20.2--debian-buster--ppc64le.tar.xz
          asset_content_type: application/x-xz

      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  

  nim-0-20-2-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-0-20-2-create-release
      
      
      - build-nim-0-20-2--alpine-3-12--linux-amd64
      
      - build-nim-0-20-2--alpine-3-12--linux-arm-v6
      
      - build-nim-0-20-2--alpine-3-12--linux-arm-v7
      
      - build-nim-0-20-2--alpine-3-12--linux-arm64-v8
      
      
      
      - build-nim-0-20-2--archlinux--linux-amd64
      
      - build-nim-0-20-2--archlinux--linux-arm-v5
      
      - build-nim-0-20-2--archlinux--linux-arm-v6
      
      - build-nim-0-20-2--archlinux--linux-arm-v7
      
      - build-nim-0-20-2--archlinux--linux-arm64-v8
      
      
      
      - build-nim-0-20-2--debian-buster--linux-amd64
      
      - build-nim-0-20-2--debian-buster--linux-386
      
      - build-nim-0-20-2--debian-buster--linux-arm-v5
      
      - build-nim-0-20-2--debian-buster--linux-arm-v7
      
      - build-nim-0-20-2--debian-buster--linux-arm64-v8
      
      - build-nim-0-20-2--debian-buster--linux-ppc64le
      
      

    steps:
      - uses: eregon/publish-release@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          release_id: ${{ needs.nim-0-20-2-create-release.outputs.id }}

  
  nim-1-0-10-create-release:
    name: Create release 1.0.10

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Generate release name
        id: generate-release-name
        run: |
          release_name=nim-1.0.10--$(date '+%Y%m%d%H%M')
          echo "::set-output name=release_name::${release_name}"

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate-release-name.outputs.release_name }}
          release_name: ${{ steps.generate-release-name.outputs.release_name }}
          draft: true
          prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        

  
  
  build-nim-1-0-10--alpine-3-12--linux-amd64:
    name: 1.0.10, alpine-3-12, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-alpine-3-12-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:alpine-3.12 \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-0-10--alpine-3-12--linux-arm-v6:
    name: 1.0.10, alpine-3-12, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-alpine-3-12-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--arm32v6.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--arm32v6.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--alpine-3-12--linux-arm-v7:
    name: 1.0.10, alpine-3-12, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-alpine-3-12-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--alpine-3-12--linux-arm64-v8:
    name: 1.0.10, alpine-3-12, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-alpine-3-12-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--alpine-3-12--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-1-0-10--archlinux--linux-amd64:
    name: 1.0.10, archlinux, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-archlinux-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:archlinux \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--archlinux--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--archlinux--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-0-10--archlinux--linux-arm-v5:
    name: 1.0.10, archlinux, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-archlinux-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm32v5.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm32v5.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--archlinux--linux-arm-v6:
    name: 1.0.10, archlinux, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-archlinux-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm32v6.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm32v6.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--archlinux--linux-arm-v7:
    name: 1.0.10, archlinux, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-archlinux-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--archlinux--linux-arm64-v8:
    name: 1.0.10, archlinux, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-archlinux-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--archlinux--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-1-0-10--debian-buster--linux-amd64:
    name: 1.0.10, debian-buster, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-debian-buster-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:debian-buster-slim \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--debian-buster--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--debian-buster--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-0-10--debian-buster--linux-386:
    name: 1.0.10, debian-buster, linux/386
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-debian-buster-linux/386-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--debian-buster--386.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--debian-buster--386.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--debian-buster--linux-arm-v5:
    name: 1.0.10, debian-buster, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-debian-buster-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--debian-buster--arm32v5.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--debian-buster--arm32v5.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--debian-buster--linux-arm-v7:
    name: 1.0.10, debian-buster, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-debian-buster-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--debian-buster--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--debian-buster--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--debian-buster--linux-arm64-v8:
    name: 1.0.10, debian-buster, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-debian-buster-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--debian-buster--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--debian-buster--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-0-10--debian-buster--linux-ppc64le:
    name: 1.0.10, debian-buster, linux/ppc64le
    runs-on: ubuntu-latest
    needs:
      - "nim-1-0-10-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.0.10-debian-buster-linux/ppc64le-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.0.10"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.0.10"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.0.10--debian-buster--ppc64le.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-0-10-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.0.10--debian-buster--ppc64le.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  

  nim-1-0-10-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-1-0-10-create-release
      
      
      - build-nim-1-0-10--alpine-3-12--linux-amd64
      
      - build-nim-1-0-10--alpine-3-12--linux-arm-v6
      
      - build-nim-1-0-10--alpine-3-12--linux-arm-v7
      
      - build-nim-1-0-10--alpine-3-12--linux-arm64-v8
      
      
      
      - build-nim-1-0-10--archlinux--linux-amd64
      
      - build-nim-1-0-10--archlinux--linux-arm-v5
      
      - build-nim-1-0-10--archlinux--linux-arm-v6
      
      - build-nim-1-0-10--archlinux--linux-arm-v7
      
      - build-nim-1-0-10--archlinux--linux-arm64-v8
      
      
      
      - build-nim-1-0-10--debian-buster--linux-amd64
      
      - build-nim-1-0-10--debian-buster--linux-386
      
      - build-nim-1-0-10--debian-buster--linux-arm-v5
      
      - build-nim-1-0-10--debian-buster--linux-arm-v7
      
      - build-nim-1-0-10--debian-buster--linux-arm64-v8
      
      - build-nim-1-0-10--debian-buster--linux-ppc64le
      
      

    steps:
      - uses: eregon/publish-release@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          release_id: ${{ needs.nim-1-0-10-create-release.outputs.id }}

  
  nim-1-2-8-create-release:
    name: Create release 1.2.8

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Generate release name
        id: generate-release-name
        run: |
          release_name=nim-1.2.8--$(date '+%Y%m%d%H%M')
          echo "::set-output name=release_name::${release_name}"

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate-release-name.outputs.release_name }}
          release_name: ${{ steps.generate-release-name.outputs.release_name }}
          draft: true
          prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        

  
  
  build-nim-1-2-8--alpine-3-12--linux-amd64:
    name: 1.2.8, alpine-3-12, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-alpine-3-12-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:alpine-3.12 \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-2-8--alpine-3-12--linux-arm-v6:
    name: 1.2.8, alpine-3-12, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-alpine-3-12-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--arm32v6.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--arm32v6.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--alpine-3-12--linux-arm-v7:
    name: 1.2.8, alpine-3-12, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-alpine-3-12-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--alpine-3-12--linux-arm64-v8:
    name: 1.2.8, alpine-3-12, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-alpine-3-12-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--alpine-3-12--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-1-2-8--archlinux--linux-amd64:
    name: 1.2.8, archlinux, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-archlinux-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:archlinux \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--archlinux--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--archlinux--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-2-8--archlinux--linux-arm-v5:
    name: 1.2.8, archlinux, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-archlinux-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm32v5.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm32v5.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--archlinux--linux-arm-v6:
    name: 1.2.8, archlinux, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-archlinux-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm32v6.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm32v6.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--archlinux--linux-arm-v7:
    name: 1.2.8, archlinux, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-archlinux-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--archlinux--linux-arm64-v8:
    name: 1.2.8, archlinux, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-archlinux-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--archlinux--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-1-2-8--debian-buster--linux-amd64:
    name: 1.2.8, debian-buster, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-debian-buster-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:debian-buster-slim \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--debian-buster--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--debian-buster--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-2-8--debian-buster--linux-386:
    name: 1.2.8, debian-buster, linux/386
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-debian-buster-linux/386-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--debian-buster--386.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--debian-buster--386.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--debian-buster--linux-arm-v5:
    name: 1.2.8, debian-buster, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-debian-buster-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--debian-buster--arm32v5.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--debian-buster--arm32v5.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--debian-buster--linux-arm-v7:
    name: 1.2.8, debian-buster, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-debian-buster-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--debian-buster--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--debian-buster--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--debian-buster--linux-arm64-v8:
    name: 1.2.8, debian-buster, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-debian-buster-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--debian-buster--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--debian-buster--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-2-8--debian-buster--linux-ppc64le:
    name: 1.2.8, debian-buster, linux/ppc64le
    runs-on: ubuntu-latest
    needs:
      - "nim-1-2-8-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.2.8-debian-buster-linux/ppc64le-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.2.8"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.2.8"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.2.8--debian-buster--ppc64le.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-2-8-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.2.8--debian-buster--ppc64le.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  

  nim-1-2-8-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-1-2-8-create-release
      
      
      - build-nim-1-2-8--alpine-3-12--linux-amd64
      
      - build-nim-1-2-8--alpine-3-12--linux-arm-v6
      
      - build-nim-1-2-8--alpine-3-12--linux-arm-v7
      
      - build-nim-1-2-8--alpine-3-12--linux-arm64-v8
      
      
      
      - build-nim-1-2-8--archlinux--linux-amd64
      
      - build-nim-1-2-8--archlinux--linux-arm-v5
      
      - build-nim-1-2-8--archlinux--linux-arm-v6
      
      - build-nim-1-2-8--archlinux--linux-arm-v7
      
      - build-nim-1-2-8--archlinux--linux-arm64-v8
      
      
      
      - build-nim-1-2-8--debian-buster--linux-amd64
      
      - build-nim-1-2-8--debian-buster--linux-386
      
      - build-nim-1-2-8--debian-buster--linux-arm-v5
      
      - build-nim-1-2-8--debian-buster--linux-arm-v7
      
      - build-nim-1-2-8--debian-buster--linux-arm64-v8
      
      - build-nim-1-2-8--debian-buster--linux-ppc64le
      
      

    steps:
      - uses: eregon/publish-release@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          release_id: ${{ needs.nim-1-2-8-create-release.outputs.id }}

  
  nim-1-4-2-create-release:
    name: Create release 1.4.2

    runs-on: ubuntu-latest

    outputs:
      
      id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_name: ${{ steps.generate-release-name.outputs.release_name }}
      

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      - name: Generate release name
        id: generate-release-name
        run: |
          release_name=nim-1.4.2--$(date '+%Y%m%d%H%M')
          echo "::set-output name=release_name::${release_name}"

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate-release-name.outputs.release_name }}
          release_name: ${{ steps.generate-release-name.outputs.release_name }}
          draft: true
          prerelease: ${{ !startsWith(github.event.ref, 'refs/tags/') }}
        

  
  
  build-nim-1-4-2--alpine-3-12--linux-amd64:
    name: 1.4.2, alpine-3-12, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-alpine-3-12-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:alpine-3.12 \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-4-2--alpine-3-12--linux-arm-v6:
    name: 1.4.2, alpine-3-12, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-alpine-3-12-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--arm32v6.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--arm32v6.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--alpine-3-12--linux-arm-v7:
    name: 1.4.2, alpine-3-12, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-alpine-3-12-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--alpine-3-12--linux-arm64-v8:
    name: 1.4.2, alpine-3-12, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-alpine-3-12-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:alpine-3.12
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:alpine-3.12 \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--alpine-3-12--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:alpine-3.12 --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-1-4-2--archlinux--linux-amd64:
    name: 1.4.2, archlinux, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-archlinux-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:archlinux \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--archlinux--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--archlinux--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-4-2--archlinux--linux-arm-v5:
    name: 1.4.2, archlinux, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-archlinux-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm32v5.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm32v5.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--archlinux--linux-arm-v6:
    name: 1.4.2, archlinux, linux/arm/v6
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-archlinux-linux/arm/v6-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm32v6.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v6 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm32v6.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--archlinux--linux-arm-v7:
    name: 1.4.2, archlinux, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-archlinux-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--archlinux--linux-arm64-v8:
    name: 1.4.2, archlinux, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-archlinux-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:archlinux
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:archlinux \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--archlinux--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:archlinux --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  
  
  build-nim-1-4-2--debian-buster--linux-amd64:
    name: 1.4.2, debian-buster, linux/amd64
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-debian-buster-linux/amd64-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          # Build in native container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm:debian-buster-slim \
            sh build-nim.sh ${nim}

          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--debian-buster--amd64.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/amd64 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--debian-buster--amd64.test-log.txt
          asset_content_type: text/plain
      

      

  
  build-nim-1-4-2--debian-buster--linux-386:
    name: 1.4.2, debian-buster, linux/386
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-debian-buster-linux/386-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--debian-buster--386.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/386 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--debian-buster--386.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--debian-buster--linux-arm-v5:
    name: 1.4.2, debian-buster, linux/arm/v5
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-debian-buster-linux/arm/v5-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--debian-buster--arm32v5.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v5 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--debian-buster--arm32v5.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--debian-buster--linux-arm-v7:
    name: 1.4.2, debian-buster, linux/arm/v7
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-debian-buster-linux/arm/v7-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--debian-buster--arm32v7.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm/v7 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--debian-buster--arm32v7.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--debian-buster--linux-arm64-v8:
    name: 1.4.2, debian-buster, linux/arm64/v8
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-debian-buster-linux/arm64/v8-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--debian-buster--arm64v8.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/arm64/v8 \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--debian-buster--arm64v8.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  build-nim-1-4-2--debian-buster--linux-ppc64le:
    name: 1.4.2, debian-buster, linux/ppc64le
    runs-on: ubuntu-latest
    needs:
      - "nim-1-4-2-create-release"
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive

      
      - name: Configure QEMU
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y qemu qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      

      - name: Enable Docker experimental features
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version -f '{{.Server.Experimental}}'

      - name: Restore Nim cache
        uses: actions/cache@v2
        with:
          path: |
            build/nimcache
          key: "nim-1.4.2-debian-buster-linux/ppc64le-nimcache"

      - name: Install pixz
        run: |
          sudo apt-get update -q -y
          sudo apt-get -qq install -y pixz

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      
      - name: Start distcc host
        run: |
          docker run -d \
            --platform linux/amd64 \
            -p 3600-3900:3600-3900/tcp \
            elijahru/build-farm:debian-buster-slim
      

      - name: Build Nim
        id: build-nim
        shell: bash
        run: |
          set -uexo pipefail

          cd build
          mkdir -p nimcache

          nim="nim-1.4.2"
          wget "https://nim-lang.org/download/${nim}.tar.xz"
          pixz -d "${nim}.tar.xz" "${nim}.tar"
          tar xf "${nim}.tar"
          mv "$nim" src
          rm "${nim}.tar.xz" "${nim}.tar"

          
          dump_logs () {
            docker logs $(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          }

          # Build in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh build-nim.sh ${nim} || (status=$?; dump_logs; exit $status)
          

      - name: Create tarball
        id: create-tarball
        run: |
          cd build
          nim="nim-1.4.2"
          tarball="${nim}.tar.xz"
          tar -Ipixz -cf "$tarball" "$nim"
          echo "::set-output name=tarball_asset_path::${PWD}/${tarball}"

      - name: Add tarball to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.create-tarball.outputs.tarball_asset_path }}
          asset_name: nim-1.4.2--debian-buster--ppc64le.tar.xz
          asset_content_type: application/x-xz

      
      - name: Run tests
        id: run-tests
        run: |
          cd build

          # Test in emulated container
          docker run \
            --platform linux/ppc64le \
            --mount "type=bind,src=${PWD}/nimcache,dst=/root/.cache/nim" \
            --mount "type=bind,src=${PWD}/,dst=/build" \
            --workdir /build \
            elijahru/build-farm-client:debian-buster-slim \
            sh test-nim.sh > test-log.txt 2>&1 || true

          echo "::set-output name=test_log_asset_path::${PWD}/test-log.txt"

      - name: Add test log to release
        uses: actions/upload-release-asset@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          upload_url: ${{ needs.nim-1-4-2-create-release.outputs.upload_url }}
          asset_path: ${{ steps.run-tests.outputs.test_log_asset_path }}
          asset_name: nim-1.4.2--debian-buster--ppc64le.test-log.txt
          asset_content_type: text/plain
      

      
      - name: Stop build host
        run: |
          id=$(docker ps --filter ancestor=elijahru/build-farm:debian-buster-slim --format "{{.ID}}")
          if [ "$id" != "" ]
          then
            docker kill $id
          fi
      

  
  

  nim-1-4-2-publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
      - nim-1-4-2-create-release
      
      
      - build-nim-1-4-2--alpine-3-12--linux-amd64
      
      - build-nim-1-4-2--alpine-3-12--linux-arm-v6
      
      - build-nim-1-4-2--alpine-3-12--linux-arm-v7
      
      - build-nim-1-4-2--alpine-3-12--linux-arm64-v8
      
      
      
      - build-nim-1-4-2--archlinux--linux-amd64
      
      - build-nim-1-4-2--archlinux--linux-arm-v5
      
      - build-nim-1-4-2--archlinux--linux-arm-v6
      
      - build-nim-1-4-2--archlinux--linux-arm-v7
      
      - build-nim-1-4-2--archlinux--linux-arm64-v8
      
      
      
      - build-nim-1-4-2--debian-buster--linux-amd64
      
      - build-nim-1-4-2--debian-buster--linux-386
      
      - build-nim-1-4-2--debian-buster--linux-arm-v5
      
      - build-nim-1-4-2--debian-buster--linux-arm-v7
      
      - build-nim-1-4-2--debian-buster--linux-arm64-v8
      
      - build-nim-1-4-2--debian-buster--linux-ppc64le
      
      

    steps:
      - uses: eregon/publish-release@v1
        env:
          
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        with:
          release_id: ${{ needs.nim-1-4-2-create-release.outputs.id }}

  