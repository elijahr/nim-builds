name: Build
on:
  pull_request:
    paths-ignore:
      - "**.md"
  push:
    paths-ignore:
      - "**.md"

jobs:
  alpine-3-12:
    name: Build Nim
    runs-on: ubuntu-latest
    strategy:
      matrix:
        nim-version: ["1.0.10", "1.2.8", "1.4.2"]
        build-client: [ 'alpine-amd64', 'alpine-386', 'alpine-arm32v6', 'alpine-arm32v7', 'alpine-arm64v8', 'alpine-ppc64le' ]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
      with:
        fetch-depth: 1
        submodules: recursive

    - name: Configure QEMU
      run: |
        sudo apt-get update -q -y
        sudo apt-get -qq install -y qemu qemu-user-static
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

    - name: Build Nim
      run: |
        docker-compose up -d alpine-build-host
        docker-compose run ${{ matrix.build-client }} \
          sh /code/build.sh ${{ matrix.nim-version }}

    # - name: Enable Docker experimental features
    #   run: |
    #     echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
    #     sudo service docker restart
    #     docker version -f '{{.Server.Experimental}}'



    # steps:
    #   - name: Fetch or build csources
    #     id: build-csources
    #     env:
    #       CC: ${{ matrix.cc }}
    #     run: |
    #       set -uex

    #       csources_version="v0.20.0"
    #       bin_dir="csources-${{ matrix.os }}-${{ matrix.cpu }}"
    #       tarball="${bin_dir}.tar.xz"

    #       echo "::set-output name=csources-version::${csources_version}"
    #       echo "::set-output name=bin-dir::${bin_dir}"
    #       echo "::set-output name=tarball::${tarball}"

    #       status=$(curl \
    #         --silent \
    #         --head \
    #         --location \
    #         "https://dl.bintray.com/elijahr/nim-builds/${tarball}" \
    #         | head -n 1 | cut -d ' ' -f2)

    #       if [ "$status" = "404" ]
    #       then
    #         if [ "${{ matrix.packages }}" != "" ]
    #         then
    #           sudo apt-get install ${{ matrix.packages }}
    #         fi
    #         git clone \
    #           -q --depth 1 \
    #           --branch "$csources_version" \
    #           https://github.com/nim-lang/csources.git
    #         cd csources
    #         rm -rf .git/
    #         sh build.sh \
    #           --cpu ${{ matrix.cpu }} \
    #           --os ${{ matrix.os }}
    #         mv bin "../${bin_dir}"
    #         cd -
    #         rm -rf csources
    #         tar -cJf "$tarball" "$bin_dir"
    #         echo "::set-output name=do-upload::true"
    #       fi

    #   - name: Upload csources build to Bintray
    #     if: ${{ steps.build-csources.outputs.do-upload }}
    #     uses: bpicode/github-action-upload-bintray@master
    #     with:
    #       file: ./${{ steps.build-csources.outputs.tarball }}
    #       api_user: elijahr
    #       api_key: ${{ secrets.BINTRAY_API_KEY }}
    #       repository_user: elijahr
    #       repository: nim-builds
    #       package: csources
    #       version: ${{ steps.build-csources.outputs.csources-version }}
    #       publish: 1

    #   - uses: actions/checkout@v2
    #     with:
    #       repository: 'nim-lang/Nim'
    #       ref: 'v1.4.2'

    #   - name: Build Nim
    #     run: |
    #       bin_dir=${{ steps.build-csources.outputs.bin-dir }}
    #       tarball=${{ steps.build-csources.outputs.tarball }}
    #       curl \
    #         --location \
    #         --silent \
    #         "https://dl.bintray.com/elijahr/nim-builds/${tarball}" \
    #         -o "$tarball"
    #       tar -xJf "$tarball"
    #       rm -r "$tarball"
    #       mkdir -p bin
    #       mv "${bin_dir}/nim" bin/
    #       sh build_all.sh \
    #         --cpu ${{ matrix.cpu }} \
    #         --os ${{ matrix.os }}
    #       find .


